name: CI

on:
  push:
    branches:
      - main
      - main-v[0-9].**
    tags:
      - v[0-9].**

  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - auto_merge_enabled
      - edited

jobs:
  commitlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install commitlint
        run: npm install --global @commitlint/cli @commitlint/config-conventional

      - name: Validate PR commits with commitlint
        if: github.event_name == 'pull_request' && !(contains(github.event.pull_request.title, '/merge-main') || contains(github.event.pull_request.title, '/merge main'))
        run: commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

      - name: Validate PR title with commitlint
        if: github.event_name != 'merge_group' && github.event_name != 'push' && !(contains(github.event.pull_request.title, '/merge-main') || contains(github.event.pull_request.title, '/merge main'))
        run: echo "${{ github.event.pull_request.title }}" | commitlint --verbose

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          components: rustfmt
          toolchain: nightly-2024-01-12
      - uses: Swatinem/rust-cache@v2
      - run: scripts/rust_fmt.sh --check

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - run: scripts/clippy.sh

  run-python-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - run: |
          python -m pip install --upgrade pip
          pip install pytest
      - run: pytest scripts/merge_paths_test.py

  run-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo test
      - run: cargo test --features concurrency


  udeps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        name: "Rust Toolchain Setup"
        with:
          toolchain: nightly-2024-01-12
      - uses: Swatinem/rust-cache@v2
        id: "cache-cargo"
      - if: ${{ steps.cache-cargo.outputs.cache-hit != 'true' }}
        name: "Download and run cargo-udeps"
        run: |
          wget -O - -c https://github.com/est31/cargo-udeps/releases/download/v0.1.45/cargo-udeps-v0.1.45-x86_64-unknown-linux-gnu.tar.gz | tar -xz
          cargo-udeps-*/cargo-udeps udeps
        env:
          RUSTUP_TOOLCHAIN: nightly-2024-01-12

  generate-native-blockifier-artifacts:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: actions/setup-python@v4
        with:
          python-version: 'pypy3.9'
          cache: 'pip'

      - name: Install maturin
        run: cargo install maturin

      - name: Install patchelf
        run: sudo apt-get install patchelf

      - name: Get commit hash prefix
        id: commit_prefix
        # Commit hash on pull request event would be the head commit of the branch;
        # on push event (to main, for example) we should take the commit post-push.
        run: echo "short_hash=$(if [ ${{ github.event_name }} == 'pull_request' ]; then echo ${{ github.event.pull_request.head.sha }}; else echo ${{ github.event.after }}; fi | cut -c 1-7)" >> $GITHUB_OUTPUT

      - name: Build native blockifier wheel
        run: cd crates/native_blockifier && \
          # Build pypy package in release mode, targeting musl linux.
          maturin build -r -i pypy3.9 \
          --target x86_64-unknown-linux-musl

      - id: Authenticate GCP
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: ${{ secrets.BLOCKIFIER_PRODUCTS_EXT_WRITER_JSON }}

      - name: Upload binary to GCP
        id: upload_file
        uses: "google-github-actions/upload-cloud-storage@v2"
        with:
          # Filename depends on the package version in Cargo.toml; use * to ignore it.
          path: "target/wheels/*musllinux_1_2_x86_64.whl"
          destination: "native-blockifier-shared-objects/${{ steps.commit_prefix.outputs.short_hash }}/release/"
